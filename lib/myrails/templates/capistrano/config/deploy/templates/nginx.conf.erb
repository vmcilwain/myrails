upstream <%= fetch(:application) %> {
    # Path to Unicorn SOCK file, as defined previously
    server unix:<%= current_path %>/tmp/sockets/unicorn.<%= fetch(:application) %>.sock fail_timeout=0;
}

server {
    <%#- listen 80 default_server; %>
    listen 443 ssl;

    server_name <%= fetch(:fqdn) %> www.<%= fetch(:fqdn) %>;
    ssl_certificate /etc/letsencrypt/live/<%= fetch(:fqdn) %>/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/<%= fetch(:fqdn) %>/privkey.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    # Application root, as defined previously
    root /var/www/<%= fetch(:application) %>/public;

    try_files $uri/index.html $uri @<%= fetch(:application) %>;

    location @<%= fetch(:application) %> {
        proxy_pass http://<%= fetch(:application) %>;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header  X-Forwarded-Proto $scheme;
        proxy_set_header  X-Forwarded-Ssl on; # Optional
        proxy_set_header  X-Forwarded-Port $server_port;
        proxy_set_header  X-Forwarded-Host $host;
        proxy_redirect off;
    }

    error_page 500 502 503 504 /500.html;
    client_max_body_size 4G;
    keepalive_timeout 10;

    if ( -f <%= shared_path %>/.maintenance ) {
    set $maintenance 1;
  }

  if ( $uri ~ ^/maintenance/ ) {
    set $maintenance 0;
  }

  if ( $maintenance ) {
    rewrite (.*) /maintenance/index.html last;
  }

  location ~ ^/(maintenance)/  {
    root <%= shared_path %>/public;
    gzip_static on; # to serve pre-gzipped version
    expires max;
    add_header Cache-Control public;
  }

  location ~ ^/(assets)/  {
    root <%= current_path %>/public;
    gzip_static on; # to serve pre-gzipped version
    expires max;
    add_header Cache-Control public;
  }
}

server {
    listen 80;
    server_name <%= fetch(:fqdn) %> www.<%= fetch(:fqdn) %>;
    return 301 https://$host$request_uri;
}
